var documenterSearchIndex = {"docs":
[{"location":"examples/#Intro-and-examples","page":"Intro and examples","title":"Intro and examples","text":"","category":"section"},{"location":"examples/","page":"Intro and examples","title":"Intro and examples","text":"This library helps in the development of reactive frontends and can be used alongside WGLMakie and JSServe.","category":"page"},{"location":"examples/","page":"Intro and examples","title":"Intro and examples","text":"Focus on the styling and let us handle the reactive part!","category":"page"},{"location":"examples/","page":"Intro and examples","title":"Intro and examples","text":"Let's go through two examples on how to use this library, the first one will be a simple one, and the second, more complex.","category":"page"},{"location":"examples/","page":"Intro and examples","title":"Intro and examples","text":"Example 1 Example 2\n(Image: \"examples/assets/example1.gif\") (Image: \"examples/assets/example2.gif\")","category":"page"},{"location":"examples/#Example-1","page":"Intro and examples","title":"Example 1","text":"","category":"section"},{"location":"examples/","page":"Intro and examples","title":"Intro and examples","text":"For example let's say we want to create a view in which we can visualize one of three figures (a, b and c) in a slider manner.  We also want to control the slider with two buttons: LEFT and RIGHT. The RIGHT button slided to the next figure and the LEFT one slides to the figure before.","category":"page"},{"location":"examples/","page":"Intro and examples","title":"Intro and examples","text":"The layout would look something like this:","category":"page"},{"location":"examples/","page":"Intro and examples","title":"Intro and examples","text":"(Image: \"< (left) | 1 | (right) >\")","category":"page"},{"location":"examples/","page":"Intro and examples","title":"Intro and examples","text":"By acting on the buttons, one moves from one figure to the other.","category":"page"},{"location":"examples/#This-can-be-easily-implemented-using-**CssMakieLayout.jl**","page":"Intro and examples","title":"This can be easily implemented using CssMakieLayout.jl","text":"","category":"section"},{"location":"examples/","page":"Intro and examples","title":"Intro and examples","text":"First of all include the library in your project","category":"page"},{"location":"examples/","page":"Intro and examples","title":"Intro and examples","text":"using Base.Threads\r\nusing WGLMakie\r\nWGLMakie.activate!()\r\nusing JSServe\r\nusing Markdown\r\nimport JSServe.TailwindDashboard as D\r\n\r\n# 1. LOAD LIBRARY   \r\nusing CssMakieLayout","category":"page"},{"location":"examples/","page":"Intro and examples","title":"Intro and examples","text":"Then define your layout using CSSMakieLayout.jl,","category":"page"},{"location":"examples/","page":"Intro and examples","title":"Intro and examples","text":"\r\nconfig = Dict(\r\n    :resolution => (1400, 700), #used for the main figures\r\n    :colorscheme => [\"rgb(242, 242, 247)\", \"black\", \"#000529\", \"white\"]\r\n)\r\n\r\nlanding = App() do session::Session\r\n    CssMakieLayout.CurrentSession = session\r\n\r\n    # Active index: 1 2 or 3\r\n    #   1: the first a.k.a 'a' figure is active\r\n    #   2: the second a.k.a 'b' figure is active    \r\n    #   3: the third a.k.a 'c' figure is active\r\n    activeidx = Observable(1)\r\n\r\n    # Create the buttons and the mainfigures\r\n    mainfigures = [Figure(backgroundcolor=:white,  resolution=config[:resolution]) for _ in 1:3]\r\n    \r\n    buttons = [modifier(wrap(DOM.h1(\"〈\")); action=:decreasecap, parameter=activeidx, cap=3),\r\n                modifier(wrap(DOM.h1(\"〉\")); action=:increasecap, parameter=activeidx, cap=3)]\r\n    \r\n    \r\n    axii = [Axis(mainfigures[i][1, 1]) for i in 1:3]\r\n    # Plot each of the 3 figures using your own plots!\r\n    scatter!(axii[1], 0:0.1:10, x -> sin(x))\r\n    scatter!(axii[2], 0:0.1:10, x -> tan(x))\r\n    scatter!(axii[3], 0:0.1:10, x -> log(x))\r\n\r\n    # Obtain the reactive layout using a zstack controlled by the activeidx observable\r\n    activefig = zstack(\r\n                active(mainfigures[1]),\r\n                wrap(mainfigures[2]),\r\n                wrap(mainfigures[3]);\r\n                observable=activeidx,\r\n                style=\"width: $(config[:resolution][1])px\")\r\n    \r\n\r\n    layout = hstack(buttons[1], activefig, buttons[2])\r\n    \r\n    \r\n    return hstack(CssMakieLayout.formatstyle, CssMakieLayout.Themes[:elegant](config), layout)\r\n\r\nend","category":"page"},{"location":"examples/","page":"Intro and examples","title":"Intro and examples","text":"And finally Serve the app","category":"page"},{"location":"examples/","page":"Intro and examples","title":"Intro and examples","text":"isdefined(Main, :server) && close(server);\r\nport = 8888\r\ninterface = \"127.0.0.1\"\r\nproxy_url = \"\"\r\nserver = JSServe.Server(interface, port; proxy_url);\r\nJSServe.HTTPServer.start(server)\r\nJSServe.route!(server, \"/\" => landing);\r\n\r\n\r\n# the app will run on localhost at port 8888\r\nwait(server)","category":"page"},{"location":"examples/","page":"Intro and examples","title":"Intro and examples","text":"This code can be visualized at ./examples/example_readme, or at https://github.com/adrianariton/QuantumFristGenRepeater  (this will be updated shortly with the plots of the first gen repeater)","category":"page"},{"location":"examples/#Example-2","page":"Intro and examples","title":"Example 2","text":"","category":"section"},{"location":"examples/","page":"Intro and examples","title":"Intro and examples","text":"This time we are going to create a selectable layout with a menu, that will look like this:","category":"page"},{"location":"examples/","page":"Intro and examples","title":"Intro and examples","text":"(Image: \"< (left) | 1 | (right) >\")","category":"page"},{"location":"examples/","page":"Intro and examples","title":"Intro and examples","text":"To do this we will follow the same stept, with a modified layout function:","category":"page"},{"location":"examples/","page":"Intro and examples","title":"Intro and examples","text":"First of all include the library in your project","category":"page"},{"location":"examples/","page":"Intro and examples","title":"Intro and examples","text":"using Base.Threads\r\nusing WGLMakie\r\nWGLMakie.activate!()\r\nusing JSServe\r\nusing Markdown\r\nimport JSServe.TailwindDashboard as D\r\n\r\n# 1. LOAD LIBRARY   \r\nusing CssMakieLayout","category":"page"},{"location":"examples/","page":"Intro and examples","title":"Intro and examples","text":"Create the layout","category":"page"},{"location":"examples/","page":"Intro and examples","title":"Intro and examples","text":"\r\nconfig = Dict(\r\n    :resolution => (1400, 700), #used for the main figures\r\n    :colorscheme => [\"rgb(242, 242, 247)\", \"black\", \"#000529\", \"white\"],\r\n    :smallresolution => (280, 160), #used for the menufigures\r\n\r\n)\r\n\r\n# define some additional style for the menufigures' container\r\nmenufigs_style = \"\"\"\r\n    display:flex;\r\n    flex-direction: row;\r\n    justify-content: space-around;\r\n    background-color: $(config[:colorscheme][1]);\r\n    padding-top: 20px;\r\n    width: $(config[:resolution][1])px;\r\n\"\"\"\r\n\r\nlanding = App() do session::Session\r\n    CssMakieLayout.CurrentSession = session\r\n\r\n    # Create the menufigures and the mainfigures\r\n    mainfigures = [Figure(backgroundcolor=:white,  resolution=config[:resolution]) for _ in 1:3]\r\n    menufigures = [Figure(backgroundcolor=:white,  resolution=config[:smallresolution]) for _ in 1:3]\r\n    # Figure titles\r\n    titles= [\"Figure a: sin(x)\",\r\n            \"Figure b: tan(x)\",\r\n            \"Figure c: cos(x)\"]\r\n    \r\n    # Active index/ hovered index: 1 2 or 3\r\n    #   1: the first a.k.a 'a' figure is active / hovered respectively\r\n    #   2: the second a.k.a 'b' figure is active / hovered respectively\r\n    #   3: the third a.k.a 'c' figure is active / hovered respectively\r\n    activeidx = Observable(1)\r\n    hoveredidx = Observable(0)\r\n\r\n    # Add custom click event listeners\r\n    for i in 1:3\r\n        on(events(menufigures[i]).mousebutton) do event\r\n            activeidx[]=i  \r\n            notify(activeidx)\r\n        end\r\n        on(events(menufigures[i]).mouseposition) do event\r\n            hoveredidx[]=i  \r\n            notify(hoveredidx)\r\n        end\r\n    end\r\n\r\n    # Axii of each of the 6 figures\r\n    main_axii = [Axis(mainfigures[i][1, 1]) for i in 1:3]\r\n    menu_axii = [Axis(menufigures[i][1, 1]) for i in 1:3]\r\n\r\n    # Plot each of the 3 figures using your own plots!\r\n    scatter!(main_axii[1], 0:0.1:10, x -> sin(x))\r\n    scatter!(main_axii[2], 0:0.1:10, x -> tan(x))\r\n    scatter!(main_axii[3], 0:0.1:10, x -> log(x))\r\n\r\n    scatter!(menu_axii[1], 0:0.1:10, x -> sin(x))\r\n    scatter!(menu_axii[2], 0:0.1:10, x -> tan(x))\r\n    scatter!(menu_axii[3], 0:0.1:10, x -> log(x))\r\n\r\n    \r\n    # Create ZStacks displaying titles below the menu graphs\r\n    titles_zstack = [DOM.h4(t, class=\"upper\") for t in titles]\r\n    \r\n    for i in 1:3\r\n        titles_zstack[i] = zstack(titles_zstack[i], wrap(\"\"); \r\n                                observable=@lift(($hoveredidx == i || $activeidx == i)),\r\n                                anim=[:opacity])\r\n    end\r\n\r\n    # Wrap each of the menu figures and its corresponing title zstack in a div\r\n    menufigs_andtitles = wrap([\r\n            vstack(\r\n                hoverable(menufigures[i], anim=[:border];\r\n                        stayactiveif=@lift($activeidx == i)),\r\n                titles_zstack[i];\r\n                class=\"justify-center align-center \"    \r\n            ) for i in 1:3]; \r\n            class=\"menufigs\",\r\n            style=menufigs_style\r\n        )\r\n    \r\n    # Create the active figure zstack and add the :whoop (zoom in) animation to it\r\n    activefig = zstack(\r\n                active(mainfigures[1]),\r\n                wrap(mainfigures[2]),\r\n                wrap(mainfigures[3]);\r\n                observable=activeidx,\r\n                anim=[:whoop])\r\n\r\n    # Obtain reactive layout of the figures \r\n    return wrap(menufigs_andtitles, activefig, CssMakieLayout.formatstyle)\r\n\r\nend","category":"page"},{"location":"examples/","page":"Intro and examples","title":"Intro and examples","text":"And finally Serve the app","category":"page"},{"location":"examples/","page":"Intro and examples","title":"Intro and examples","text":"isdefined(Main, :server) && close(server);\r\nport = 8888\r\ninterface = \"127.0.0.1\"\r\nproxy_url = \"\"\r\nserver = JSServe.Server(interface, port; proxy_url);\r\nJSServe.HTTPServer.start(server)\r\nJSServe.route!(server, \"/\" => landing);\r\n\r\n\r\n# the app will run on localhost at port 8888\r\nwait(server)","category":"page"},{"location":"#Reactive-and-static-elements","page":"Reactive and static elements","title":"Reactive and static elements","text":"","category":"section"},{"location":"#CssMakieLayout.CurrentSession","page":"Reactive and static elements","title":"CssMakieLayout.CurrentSession","text":"","category":"section"},{"location":"","page":"Reactive and static elements","title":"Reactive and static elements","text":"Session used as default for all session::Session params of the following functions. Set it at the begining of your code as such:","category":"page"},{"location":"","page":"Reactive and static elements","title":"Reactive and static elements","text":"landing2 = App() do session::Session\nCssMakieLayout.CurrentSession = session\n...\nend","category":"page"},{"location":"#markdowned","page":"Reactive and static elements","title":"markdowned","text":"","category":"section"},{"location":"","page":"Reactive and static elements","title":"Reactive and static elements","text":"markdowned(figure)","category":"page"},{"location":"","page":"Reactive and static elements","title":"Reactive and static elements","text":"Markdown wrapper that displays figure's scene content. ","category":"page"},{"location":"","page":"Reactive and static elements","title":"Reactive and static elements","text":"Use: It is optional,  meaning you can also wrap the figure itself in a wrap function. Tipically used with Markdown pages.","category":"page"},{"location":"#wrap","page":"Reactive and static elements","title":"wrap","text":"","category":"section"},{"location":"","page":"Reactive and static elements","title":"Reactive and static elements","text":"wrap(content...; class, style, md=false)","category":"page"},{"location":"","page":"Reactive and static elements","title":"Reactive and static elements","text":"Wraps the content in a div element and sets the position of the div to relative.","category":"page"},{"location":"","page":"Reactive and static elements","title":"Reactive and static elements","text":"Arguments","category":"page"},{"location":"","page":"Reactive and static elements","title":"Reactive and static elements","text":"class: classes of the element in a string separated with space\nstyle: string containing the additional css style of the wrapper div\nmd: Set to false unless specified otherwise. Specifies weather to aply the markdowned       function to each element of the content parameter before wrapping them","category":"page"},{"location":"#_hoverable","page":"Reactive and static elements","title":"_hoverable","text":"","category":"section"},{"location":"","page":"Reactive and static elements","title":"Reactive and static elements","text":"_hoverable(item...; class=\"\", style=\"\", anim=[:default], md=false)","category":"page"},{"location":"","page":"Reactive and static elements","title":"Reactive and static elements","text":"Wraps content in a div and adds the hoverable class to it","category":"page"},{"location":"","page":"Reactive and static elements","title":"Reactive and static elements","text":"Arguments","category":"page"},{"location":"","page":"Reactive and static elements","title":"Reactive and static elements","text":"class: additional classes of the element in a string separated with space\nstyle: string containing the additional css style of the wrapper div\nmd: Set to false unless specified otherwise. Specifies weather to aply the markdowned       function to each element of the content parameter before wrapping them.\nanim: Choose which animation to perform on hover: can be set to [:default] or [:border]","category":"page"},{"location":"#hoverable","page":"Reactive and static elements","title":"hoverable","text":"","category":"section"},{"location":"","page":"Reactive and static elements","title":"Reactive and static elements","text":"hoverable(item...; stayactiveif::Observable=nothing, session::Session=CurrentSession, anim=[:default], class=\"\", style=\"\", md=false)","category":"page"},{"location":"","page":"Reactive and static elements","title":"Reactive and static elements","text":"Hoverable element which also stays active if the stayactiveif observable is set to 1. By active, we mean  \"to remain in the same state as when hovered\".","category":"page"},{"location":"","page":"Reactive and static elements","title":"Reactive and static elements","text":"Arguments","category":"page"},{"location":"","page":"Reactive and static elements","title":"Reactive and static elements","text":"class: additional classes of the element in a string separated with space\nstyle: string containing the additional css style of the wrapper div\nmd: Set to false unless specified otherwise. Specifies weather to aply the markdowned       function to each element of the content parameter before wrapping them.\nanim::Array: Choose which animations to perform on hover: can be set to [:default] or [:border] or a combination of the 2\nstayactiveif::Observable: If the observable set as parameter is one, the element will be active weather hovered or not,                               otherwise it will not be active unless hovered\nsession::Session=CurrentSession: App session (defaults to CssMakieLayout.CurrentSession which can be set at the begining. See CurrentSession)","category":"page"},{"location":"#_zstack","page":"Reactive and static elements","title":"_zstack","text":"","category":"section"},{"location":"","page":"Reactive and static elements","title":"Reactive and static elements","text":"_zstack(item...; class=\"\", style=\"\", md=false)","category":"page"},{"location":"","page":"Reactive and static elements","title":"Reactive and static elements","text":"A zstack receives an array/a tuple of elements, and displays just one of them based on the observable given as parameter. _zstack is a static version of the zstack, which is used in the main zstack implementation. It can also be used as scaffolding for user defined behaviours.","category":"page"},{"location":"","page":"Reactive and static elements","title":"Reactive and static elements","text":"Arguments","category":"page"},{"location":"","page":"Reactive and static elements","title":"Reactive and static elements","text":"class: additional classes of the element in a string separated with space\nstyle: string containing the additional css style of the wrapper div\nmd: Set to false unless specified otherwise. Specifies weather to aply the markdowned       function to each element of the content parameter before wrapping them.","category":"page"},{"location":"#active","page":"Reactive and static elements","title":"active","text":"","category":"section"},{"location":"","page":"Reactive and static elements","title":"Reactive and static elements","text":"active(item...; class=\"\", style=\"\", md=false)","category":"page"},{"location":"","page":"Reactive and static elements","title":"Reactive and static elements","text":"Activates a child of a zstack. Can be used to set the active element of a zstack on page load.","category":"page"},{"location":"","page":"Reactive and static elements","title":"Reactive and static elements","text":"Arguments","category":"page"},{"location":"","page":"Reactive and static elements","title":"Reactive and static elements","text":"class: additional classes of the element in a string separated with space\nstyle: string containing the additional css style of the wrapper div\nmd: Set to false unless specified otherwise. Specifies weather to aply the markdowned       function to each element of the content parameter before wrapping them.","category":"page"},{"location":"#zstack","page":"Reactive and static elements","title":"zstack","text":"","category":"section"},{"location":"","page":"Reactive and static elements","title":"Reactive and static elements","text":"zstack(item::Array; observable::Observable=nothing, session::Session=CurrentSession, class=\"\", anim=[:default], style=\"\", md=false)","category":"page"},{"location":"","page":"Reactive and static elements","title":"Reactive and static elements","text":"A zstack receives an array/a tuple of elements, and displays just one of them based on the observable given as parameter.","category":"page"},{"location":"","page":"Reactive and static elements","title":"Reactive and static elements","text":"Arguments","category":"page"},{"location":"","page":"Reactive and static elements","title":"Reactive and static elements","text":"class: additional classes of the element in a string separated with space\nstyle: string containing the additional css style of the wrapper div\nmd: Set to false unless specified otherwise. Specifies weather to aply the markdowned       function to each element of the content parameter before wrapping them.\nobservable::Observable: This selects the element which is displayed. For example if observable is 4,                           the zstack will display the 4th element of the item array/tuple.\nanim::Array: Choose which animations to perform on transition (when observable is changed). Can be set to [:default], [:whoop], [:static], [:opacity] or a non-conflicting combination of them\nsession::Session=CurrentSession: App session (defaults to CssMakieLayout.CurrentSession which can be set at the begining. See CurrentSession)","category":"page"},{"location":"#Example","page":"Reactive and static elements","title":"Example","text":"","category":"section"},{"location":"","page":"Reactive and static elements","title":"Reactive and static elements","text":"mainfigures = [Figure(backgroundcolor=:white,  resolution=config[:resolution]) for _ in 1:3]\nactivefig = zstack(\n        active(mainfigures[1]),\n        wrap(mainfigures[2]),\n        wrap(mainfigures[3]);\n        observable=activeidx)","category":"page"},{"location":"#zstack-2","page":"Reactive and static elements","title":"zstack","text":"","category":"section"},{"location":"","page":"Reactive and static elements","title":"Reactive and static elements","text":"zstack(item...; observable::Observable=nothing, session::Session=CurrentSession, class=\"\", anim=[:default], style=\"\", md=false)","category":"page"},{"location":"","page":"Reactive and static elements","title":"Reactive and static elements","text":"A zstack receives an array/a tuple of elements, and displays just one of them based on the observable given as parameter. Think of it as a carousel.","category":"page"},{"location":"","page":"Reactive and static elements","title":"Reactive and static elements","text":"Arguments","category":"page"},{"location":"","page":"Reactive and static elements","title":"Reactive and static elements","text":"class: additional classes of the element in a string separated with space\nstyle: string containing the additional css style of the wrapper div\nmd: Set to false unless specified otherwise. Specifies weather to aply the markdowned","category":"page"},{"location":"","page":"Reactive and static elements","title":"Reactive and static elements","text":"function to each element of the content parameter before wrapping them.","category":"page"},{"location":"","page":"Reactive and static elements","title":"Reactive and static elements","text":"observable::Observable: This selects the element which is displayed. For example if observable is 4,                   the zstack will display the 4th element of the item array/tuple.\nanim::Array: Choose which animations to perform on transition (when observable is changed). Can be set to [:default], [:whoop], [:static], [:opacity] or a non-conflicting combination of them\nsession::Session=CurrentSession: App session (defaults to CssMakieLayout.CurrentSession which can be set at the begining. See CurrentSession)","category":"page"},{"location":"#Example-2","page":"Reactive and static elements","title":"Example","text":"","category":"section"},{"location":"","page":"Reactive and static elements","title":"Reactive and static elements","text":"activeidx = Observable(1)\nmainfigures = [Figure(backgroundcolor=:white,  resolution=config[:resolution]) for _ in 1:3]\nactivefig = zstack(\n    active(mainfigures[1]),\n    wrap(mainfigures[2]),\n    wrap(mainfigures[3]);\n    observable=activeidx)","category":"page"},{"location":"#hstack","page":"Reactive and static elements","title":"hstack","text":"","category":"section"},{"location":"","page":"Reactive and static elements","title":"Reactive and static elements","text":"hstack(item...; class=\"\", style=\"\", md=false)","category":"page"},{"location":"","page":"Reactive and static elements","title":"Reactive and static elements","text":"Displays the given elements in a flex row.","category":"page"},{"location":"","page":"Reactive and static elements","title":"Reactive and static elements","text":"Arguments","category":"page"},{"location":"","page":"Reactive and static elements","title":"Reactive and static elements","text":"class: additional classes of the element in a string separated with space\nstyle: string containing the additional css style of the wrapper div\nmd: Set to false unless specified otherwise. Specifies weather to aply the markdowned       function to each element of the content parameter before wrapping them","category":"page"},{"location":"#vstack","page":"Reactive and static elements","title":"vstack","text":"","category":"section"},{"location":"","page":"Reactive and static elements","title":"Reactive and static elements","text":"vstack(item...; class=\"\", style=\"\", md=false)","category":"page"},{"location":"","page":"Reactive and static elements","title":"Reactive and static elements","text":"Displays the given elements in a flex column.","category":"page"},{"location":"","page":"Reactive and static elements","title":"Reactive and static elements","text":"Arguments","category":"page"},{"location":"","page":"Reactive and static elements","title":"Reactive and static elements","text":"class: additional classes of the element in a string separated with space\nstyle: string containing the additional css style of the wrapper div\nmd: Set to false unless specified otherwise. Specifies weather to aply the markdowned       function to each element of the content parameter before wrapping them","category":"page"},{"location":"#selectclass","page":"Reactive and static elements","title":"selectclass","text":"","category":"section"},{"location":"","page":"Reactive and static elements","title":"Reactive and static elements","text":"selectclass(item; toggleclasses=[], selector::Observable=nothing, session::Session=CurrentSession, class=\"\", style=\"\", md=false) ","category":"page"},{"location":"","page":"Reactive and static elements","title":"Reactive and static elements","text":"Ads a class from the toggleclasses Array to the item element based on the value of the selector Observable. Returns the modified item. Arguments","category":"page"},{"location":"","page":"Reactive and static elements","title":"Reactive and static elements","text":"class: additional classes of the element in a string separated with space\nstyle: string containing the additional css style of the wrapper div\nmd: Set to false unless specified otherwise. Specifies weather to aply the markdowned   function to each element of the content parameter before wrapping them.\ntoggleclasses::Array : Array of classes to select from \nselector::Observable: Selects which class is added to the element.\nsession::Session=CurrentSession: App session (defaults to CssMakieLayout.CurrentSession which can be set at the begining. See CurrentSession)","category":"page"},{"location":"#_button","page":"Reactive and static elements","title":"_button","text":"","category":"section"},{"location":"","page":"Reactive and static elements","title":"Reactive and static elements","text":"_button(item; class=\"\", style=\"\")","category":"page"},{"location":"","page":"Reactive and static elements","title":"Reactive and static elements","text":"Static button with no click events added (equivalent to hoverable).","category":"page"},{"location":"#modifier","page":"Reactive and static elements","title":"modifier","text":"","category":"section"},{"location":"","page":"Reactive and static elements","title":"Reactive and static elements","text":"modifier(item; action=:toggle, parameter::Observable=nothing, class=\"\", style=\"\", cap=3, step=1, md=false)","category":"page"},{"location":"","page":"Reactive and static elements","title":"Reactive and static elements","text":"Wrap an item in a clickable div (modifier element/button) and bind it to an observable. When clicked, it modifies the parameter Observable taken as parameter based on the button's action, cap and step. action can be: :toggle, :increase, :decrease, :increasemod, :decreasemod         :increasecap, :decreasecap","category":"page"},{"location":"","page":"Reactive and static elements","title":"Reactive and static elements","text":"Arguments","category":"page"},{"location":"","page":"Reactive and static elements","title":"Reactive and static elements","text":"class: additional classes of the modifier element in a string separated with space\nstyle: string containing the additional css style of the modifier\nmd: Set to false unless specified otherwise. Specifies weather to aply the markdowned       function to each element of the content parameter before wrapping them.\nparameter::Observable: Observable that is modified when a click event is triggered on the modifier.\naction: The way that the modifier button modifies it's parameter when clicked:               - :toggle: toggles the observable from 0 to 1, or from 1 to 0 (for example 1 - play, 0 - pause)           -  :increase, decrease: increase or decrease the observable by step           - :increasemod, decreasemod: increase or decrease the observable by step nd then take the modulo w.r.t cap and add 1, to keep the number in the [1, cap] interval           - :increasecap, :decreasecap: increase or decrease the observable by step, keep it in the [1, cap] interval, but do not increase/decrease when increasing and decreasing would make the observable exit the interval (as oposed to the mod option which loops back, the cap option stays there).\nstep, cap: the step of the increase/decrease steps and the maximum cappacity","category":"page"},{"location":"#Example-3","page":"Reactive and static elements","title":"Example","text":"","category":"section"},{"location":"","page":"Reactive and static elements","title":"Reactive and static elements","text":"The modifier element can be used hand in hand with a zstack element to create reactive layouts as such:","category":"page"},{"location":"","page":"Reactive and static elements","title":"Reactive and static elements","text":"mainfigures = [Figure(backgroundcolor=:white,  resolution=config[:resolution]) for _ in 1:3]\nbuttons = [modifier(wrap(DOM.h1(\"〈\")); action=:decreasecap, parameter=activeidx, cap=3, style=buttonstyle),\n        modifier(wrap(DOM.h1(\"〉\")); action=:increasecap, parameter=activeidx, cap=3, style=buttonstyle)]\nactivefig = zstack(\n            active(mainfigures[1]),\n            wrap(mainfigures[2]),\n            wrap(mainfigures[3]);\n            observable=activeidx)\nlayout = hstack(buttons[1], activefig, buttons[2])","category":"page"},{"location":"#CssMakieLayout.formatstyle","page":"Reactive and static elements","title":"CssMakieLayout.formatstyle","text":"","category":"section"},{"location":"","page":"Reactive and static elements","title":"Reactive and static elements","text":"CSS code used by the library for styling","category":"page"},{"location":"","page":"Reactive and static elements","title":"Reactive and static elements","text":"Include it in your layout when returning the final element as such:","category":"page"},{"location":"","page":"Reactive and static elements","title":"Reactive and static elements","text":"return hstack(CssMakieLayout.formatstyle, layout)","category":"page"},{"location":"#CssMakieLayout.Themes","page":"Reactive and static elements","title":"CssMakieLayout.Themes","text":"","category":"section"},{"location":"","page":"Reactive and static elements","title":"Reactive and static elements","text":"Some basic themes for abstract styling that are still in development","category":"page"}]
}
